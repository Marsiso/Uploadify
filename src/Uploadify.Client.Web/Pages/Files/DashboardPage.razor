@attribute [Permission]
@attribute [Route(PageRoutes.Homepage)]

@inject FileService FileService
@inject FolderService FolderService
@inject ISnackbar Snackbar
@inject IStringLocalizer Localizer
@using Uploadify.Client.Application.Files.Models
@using Uploadify.Client.Application.Files.Services
@using Uploadify.Client.Domain.Resources.Models
@using Uploadify.Client.Web.Components.Files
@using Uploadify.Client.Web.Components.Files.Dialogs
@using Uploadify.Client.Web.Components.Files.Inputs
@using Uploadify.Client.Web.Components.Shared
@using Uploadify.Client.Application.Files.Helpers
@implements IDisposable

<LoadingWrapper Errors="@FolderSummaryResponse?.ErrorMessages"
                IsLoading="@(IsLoading || FolderSummaryResponse == null)"
                ShowTitle
                Title="@Localizer[Translations.Pages.Dashboard.Title]">
    <Children>
        <MudBreadcrumbs Items="@FolderSummaryResponse?.Resource?.Links.Select(link => new BreadcrumbItem(link.Name.Equals("/") ? Localizer[Translations.Pages.Dashboard.Title] : link.Name, link.FolderId.ToString(), FolderSummaryResponse.Resource.FolderId == link.FolderId)).ToList()"
                        MaxItems="4"
                        Separator=">">
            <ItemTemplate Context="breadcrumb">
                <MudLink Class="folder-link"
                         Disabled="@breadcrumb.Disabled"
                         OnClick="@(() => FetchFolderSummary(int.Parse(breadcrumb.Href)))"
                         Underline="@Underline.None">
                    @breadcrumb.Text
                </MudLink>
            </ItemTemplate>
        </MudBreadcrumbs>
        <DragAndDropWrapper Destination="@FolderSummaryResponse?.Resource"
                            IsDisabled="@IsDragAndDropDisabled"
                            OnUploaded="@HandleOnUploaded">
            <Children>
                <MudTable Breakpoint="@Breakpoint.None"
                          Hover
                          Items="@FolderHelpers.GetDashboardItems(FolderSummaryResponse)"
                          Loading="@IsLoadingFolderSummary"
                          LoadingProgressColor="@Color.Tertiary"
                          OnRowClick="@(args => SelectedDashboardItem = args.Item)"
                          @ref="@DashboardRef"
                          RowClass="cursor-pointer"
                          RowClassFunc="@SelectedRowClassFunc"
                          T="DashboardItem">
                    <RowTemplate>
                        <MudTd Class="pa-0"
                               DataLabel="Název"
                               @ondblclick="@(() => HandleDashboardItemDoubleClick(context))">
                            <DashboardRowOptions ActivationEvent="@MouseEvent.RightClick"
                                                 CancellationToken="@_cancellationTokenSource.Token"
                                                 DashboardItem="@context"
                                                 FullWidth
                                                 OnChangeVisibility="@(() => HandleChangeVisibility(context))"
                                                 OnDelete="@(() => IsDeleteDialogVisible = true)"
                                                 OnDetail="@(() => IsDetailDialogVisible = true)"
                                                 OnDownload="@(() => HandleDashboardItemDownload(context))"
                                                 OnMove="@(() => IsMoveDialogVisible = true)"
                                                 OnNavigate="@(() => HandleDashboardItemDoubleClick(context))"
                                                 OnOpen="@(() => SelectedDashboardItem = context)"
                                                 OnRename="@(() => IsRenameDialogVisible = true)">
                                <Row>
                                    <DashboardRow CancellationToken="@_cancellationTokenSource.Token"
                                                  DashboardItem="@context"
                                                  OnChangeVisibility="@(() => HandleChangeVisibility(context))"
                                                  OnDelete="@(() => IsDeleteDialogVisible = true)"
                                                  OnDetail="@(() => IsDetailDialogVisible = true)"
                                                  OnDownload="@(() => HandleDashboardItemDownload(context))"
                                                  OnMove="@(() => IsMoveDialogVisible = true)"
                                                  OnNavigate="@(() => HandleDashboardItemDoubleClick(context))"
                                                  OnOpen="@(() => SelectedDashboardItem = context)"
                                                  OnRename="@(() => IsRenameDialogVisible = true)"/>
                                </Row>
                            </DashboardRowOptions>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </Children>
        </DragAndDropWrapper>

        <MudFab Class="folder-create-fab"
                Color="@Color.Tertiary"
                OnClick="@(() => IsCreateDialogVisible = true)"
                StartIcon="@Icons.Material.Rounded.Add"/>
        <CreateDialog CancellationToken="@_cancellationTokenSource.Token"
                      IsVisible="@IsCreateDialogVisible"
                      OnClose="@(() => IsCreateDialogVisible = false)"
                      OnSuccess="@HandleDashboardItemCreate"
                      ParentFolder="@FolderSummaryResponse.Resource"/>

    </Children>
</LoadingWrapper>


@if (SelectedDashboardItem != null)
{
    <DetailDialog CancellationToken="@_cancellationTokenSource.Token"
                  DashboardItem="@SelectedDashboardItem"
                  IsVisible="@IsDetailDialogVisible"
                  OnClose="@(() => IsDetailDialogVisible = false)"
                  OnOpen="@(() => HandleDashboardItemDoubleClick(SelectedDashboardItem))"
                  ParentFolder="@FolderSummaryResponse?.Resource?.Parent"/>

    <RenameDialog CancellationToken="@_cancellationTokenSource.Token"
                  File="@SelectedDashboardItem.File"
                  Folder="@SelectedDashboardItem.Folder"
                  IsFolder="@SelectedDashboardItem.IsFolder"
                  IsVisible="@IsRenameDialogVisible"
                  OnClose="@(() => IsRenameDialogVisible = false)"
                  OnSuccess="@(() => HandleDashboardItemRenamed(SelectedDashboardItem))"/>

    <DeleteDialog CancellationToken="@_cancellationTokenSource.Token"
                  File="@SelectedDashboardItem.File"
                  Folder="@SelectedDashboardItem.Folder"
                  IsFolder="@SelectedDashboardItem.IsFolder"
                  IsVisible="@IsDeleteDialogVisible"
                  OnClose="@(() => IsDeleteDialogVisible = false)"
                  OnSuccess="@(() => HandleDashboardItemDeleted(SelectedDashboardItem))"/>

    <MoveDialog CancellationToken="@_cancellationTokenSource.Token"
                File="@SelectedDashboardItem.File"
                Folder="@SelectedDashboardItem.Folder"
                IsFolder="@SelectedDashboardItem.IsFolder"
                IsVisible="@IsMoveDialogVisible"
                OnClose="@(() => IsMoveDialogVisible = false)"
                OnSuccess="@(() => HandleDashboardItemMoved(SelectedDashboardItem))"/>
}

@code {
    private readonly CancellationTokenSource _cancellationTokenSource = new();

    protected bool IsLoading { get; set; } = true;
    protected bool IsLoadingFolderSummary { get; set; }
    protected bool IsDetailDialogVisible { get; set; }
    protected bool IsRenameDialogVisible { get; set; }
    protected bool IsDeleteDialogVisible { get; set; }
    protected bool IsMoveDialogVisible { get; set; }
    protected bool IsCreateDialogVisible { get; set; }
    protected bool IsDragAndDropDisabled { get; set; }
    protected DashboardItem? SelectedDashboardItem { get; set; }
    protected MudTable<DashboardItem> DashboardRef { get; set; }
    protected ResourceResponse<FolderSummary>? FolderSummaryResponse { get; set; }

    protected override bool ShouldRender()
    {
        return !IsLoading;
    }

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        await FetchFolderSummary(cancellationToken: _cancellationTokenSource.Token);
        IsLoading = false;
    }

    protected async Task FetchFolderSummary(int? folderId = null, CancellationToken cancellationToken = default)
    {
        IsLoadingFolderSummary = true;
        FolderSummaryResponse = await FolderService.GetSummary(folderId, cancellationToken);
        IsLoadingFolderSummary = false;
        SelectedDashboardItem = null;
    }

    private string SelectedRowClassFunc(DashboardItem dashboardItem, int rowNumber)
    {
        if (SelectedDashboardItem == null)
        {
            return string.Empty;
        }

        if ((dashboardItem.IsFolder && SelectedDashboardItem.IsFolder && dashboardItem.Folder.FolderId == SelectedDashboardItem.Folder.FolderId) ||
            (!dashboardItem.IsFolder && !SelectedDashboardItem.IsFolder && dashboardItem.File.FileId == SelectedDashboardItem.File.FileId))
        {
            return "selected";
        }

        return string.Empty;
    }

    private Task HandleDashboardItemDoubleClick(DashboardItem dashboardItem)
    {
        if (dashboardItem.IsFolder)
        {
            return FetchFolderSummary(dashboardItem.Folder.FolderId, _cancellationTokenSource.Token);
        }

        return Task.CompletedTask;
    }

    private Task HandleDashboardItemRenamed(DashboardItem dashboardItem)
    {
        IsRenameDialogVisible = false;
        return FetchFolderSummary(FolderSummaryResponse?.Resource?.FolderId, _cancellationTokenSource.Token);
    }

    private Task HandleDashboardItemMoved(DashboardItem dashboardItem)
    {
        IsMoveDialogVisible = false;
        return FetchFolderSummary(FolderSummaryResponse?.Resource?.FolderId, _cancellationTokenSource.Token);
    }

    private Task HandleDashboardItemDeleted(DashboardItem dashboardItem)
    {
        IsDeleteDialogVisible = false;
        return FetchFolderSummary(FolderSummaryResponse?.Resource?.FolderId, _cancellationTokenSource.Token);
    }

    private Task HandleOnUploaded()
    {
        return FetchFolderSummary(FolderSummaryResponse?.Resource?.FolderId, _cancellationTokenSource.Token);
    }

    private async Task HandleDashboardItemDownload(DashboardItem dashboardItem)
    {
        if (dashboardItem.IsFolder)
        {
            return;
        }

        var isSuccess = await FileService.Download(dashboardItem.File.FileId.Value, dashboardItem.File.Name);
        if (isSuccess)
        {
            Snackbar.Add(string.Format(Localizer[Translations.Pages.Shared.DownloadSuccess], dashboardItem.File.Name), Severity.Success);
        }
        else
        {
            Snackbar.Add(string.Format(Localizer[Translations.Pages.Shared.DownloadFailure], dashboardItem.File.Name), Severity.Error);
        }
    }

    private Task HandleDashboardItemCreate()
    {
        IsCreateDialogVisible = false;
        return FetchFolderSummary(FolderSummaryResponse?.Resource?.FolderId, _cancellationTokenSource.Token);
    }

    private async Task HandleChangeVisibility(DashboardItem dashboardItem)
    {
        if (dashboardItem.File?.IsPublic == null)
        {
            return;
        }

        var resourceResponse = await FileService.ChangeVisibility(dashboardItem.File.FileId.Value, !dashboardItem.File.IsPublic.Value, _cancellationTokenSource.Token);
        if (resourceResponse.IsSuccess)
        {
            dashboardItem.File.IsPublic = !dashboardItem.File.IsPublic;
            Snackbar.Add(string.Format(Localizer[Translations.Pages.Dashboard.VisibilityChangedSuccess], dashboardItem.File.Name), Severity.Success);
        }
        else
        {
            Snackbar.Add(string.Format(Localizer[Translations.Pages.Dashboard.VisibilityChangedFailure], dashboardItem.File.Name), Severity.Error);
        }
    }

    void IDisposable.Dispose()
    {
        _cancellationTokenSource.Cancel();
        _cancellationTokenSource.Dispose();
    }

}
