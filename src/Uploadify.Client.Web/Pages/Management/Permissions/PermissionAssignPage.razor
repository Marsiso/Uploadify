@attribute [Route(PageRoutes.PermissionAssign)]
@attribute [Permission(Permission.EditPermissions)]
@inject ApiCallWrapper ApiCallWrapper
@inject NavigationManager Navigation
@using Uploadify.Authorization.Models
@using Uploadify.Client.Core.Infrastructure.Services
@using Uploadify.Client.Integration.Resources
@using Uploadify.Authorization.Helpers
@implements IDisposable

<PageTitle>Permission assignment</PageTitle>
<MudText Typo="Typo.h1">Permission assignment</MudText>

<MudStack Class="mt-4">
    <RoleSelector CancellationToken="_cancellationTokenSource.Token"
                  OnSelectedValueChanged="@OnRoleChanged"/>
    <PermissionSelector DefaultValues="PermissionHelpers.GetDistinctValues(_selectedRole?.Permission)"
                        OnSelectedValueChanged="@OnPermissionChanged"/>
    <MudButton Disabled="@(string.IsNullOrWhiteSpace(_selectedRole?.Name) || _isPermissionAssignmentInProgress)"
               FullWidth="true"
               OnClick="@OnSubmit"
               Variant="Variant.Filled">
        Udělit oprávnění
    </MudButton>
</MudStack>

@code {
    private bool _isPermissionAssignmentInProgress;
    private Permission _selectedPermission;
    private RoleOverview? _selectedRole;
    private readonly CancellationTokenSource _cancellationTokenSource = new();

    public void Dispose()
    {
        _cancellationTokenSource.Cancel();
        _cancellationTokenSource.Dispose();
    }

    private async Task OnSubmit()
    {
        if (string.IsNullOrWhiteSpace(_selectedRole?.Name))
        {
            return;
        }

        _isPermissionAssignmentInProgress = true;

        var response = await ApiCallWrapper.Call(client => client.ApiPermissionGrantAsync(new GrantPermissionCommand { Name = _selectedRole.Name, Permission = _selectedPermission }, _cancellationTokenSource.Token));
        if (response is { Status: Status.Ok })
        {
            Navigation.NavigateTo(PageRoutes.Management);
        }

        _isPermissionAssignmentInProgress = false;
    }

    private void OnRoleChanged(RoleOverview role)
    {
        _selectedRole = role;
    }

    private void OnPermissionChanged(Permission permission)
    {
        _selectedPermission = permission;
    }

}
