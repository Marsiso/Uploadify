@using OpenIddict.Abstractions
@using Uploadify.Client.Core.Infrastructure.Services
@using Uploadify.Client.Integration.Resources

@attribute [Permission]
@attribute [Route(PageRoutes.Profile)]

@inject ApiCallWrapper ApiCallWrapper
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IStringLocalizer<TranslationDictionary> Localizer

<PageTitle>@Localizer[Translations.Pages.Profile.Title]</PageTitle>
<MudText Typo="Typo.h1">@Localizer[Translations.Pages.Profile.Title]</MudText>
<MudText Typo="Typo.body1" Class="mt-4">@Localizer[Translations.Pages.Profile.Description]</MudText>
@if (User != null)
{
    <MudForm Class="mt-8" ReadOnly="true">
        <MudTextField T="string" Label="@Localizer[Translations.Pages.Profile.UserNameLabel]" Value="@User.UserName" DisableUnderLine="true"/>
        <MudTextField T="string" Label="@Localizer[Translations.Pages.Profile.EmailLabel]" Value="@User.Email" DisableUnderLine="true" Adornment="@(User.EmailConfirmed is true ? Adornment.End : Adornment.None)" AdornmentIcon="@Icons.Material.Rounded.Verified" IconSize="Size.Small"/>
        <MudTextField T="string" Label="@Localizer[Translations.Pages.Profile.PhoneLabel]" Value="@User.PhoneNumber" DisableUnderLine="true" Adornment="@(User.PhoneNumberConfirmed is true ? Adornment.End : Adornment.None)" AdornmentIcon="@Icons.Material.Rounded.Verified" IconSize="Size.Small"/>
        <MudTextField T="string" Label="@Localizer[Translations.Pages.Profile.GivenNameLabel]" Value="@User.GivenName" DisableUnderLine="true"/>
        <MudTextField T="string" Label="@Localizer[Translations.Pages.Profile.FamilyNameLabel]" Value="@User.FamilyName" DisableUnderLine="true"/>
    </MudForm>
}

@code {
    public UserDetail? User { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var subject = authenticationState.User.FindFirst(OpenIddictConstants.Claims.Subject)?.Value;
        var response = await ApiCallWrapper.Call(client => client.ApiUserDetailAsync(subject));
        if (response is not { Status: Status.Ok, User: not null })
        {
            User = null;
            return;
        }

        User = response.User;
    }
}
