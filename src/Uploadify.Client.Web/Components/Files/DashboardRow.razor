@using Uploadify.Client.Application.Files.Models
@using Uploadify.Client.Application.Utilities.Services
@inject MobileViewManager MobileViewManager

<div class="d-flex align-center justify-space-between px-4 py-2"
     style="width:100%;">
    <div class="d-flex align-center">
        @if (DashboardItem.IsFolder)
        {
            <MudIcon Class="pr-2"
                     Icon="@Icons.Material.Rounded.Folder"/>
        }
        else
        {
            <MudIcon Class="pr-2"
                     Icon="@Icons.Material.Rounded.InsertPhoto"/>
        }
        <MudText Style="white-space:nowrap;overflow:hidden;text-overflow:ellipsis;font-weight:500;max-width:calc(100vw - 200px);">@GetDashboardItemName(DashboardItem)</MudText>
    </div>
    <DashboardRowOptions ActivationEvent="@MouseEvent.LeftClick"
                         CancellationToken="@CancellationToken"
                         DashboardItem="@DashboardItem" OnOpen="@OnOpen"
                         OnDetail="@OnDetail"
                         OnDelete="@OnDelete"
                         OnRename="@OnRename"
                         OnMove="@OnMove"
                         OnNavigate="@OnNavigate"
                         OnDownload="@OnDownload"
                         OnChangeVisibility="@OnChangeVisibility"/>
</div>

@code {
    [Parameter] [EditorRequired] public required DashboardItem DashboardItem { get; set; }
    [Parameter] [EditorRequired] public required EventCallback OnOpen { get; set; }
    [Parameter] [EditorRequired] public required EventCallback OnDetail { get; set; }
    [Parameter] [EditorRequired] public required EventCallback OnMove { get; set; }
    [Parameter] [EditorRequired] public required EventCallback OnNavigate { get; set; }
    [Parameter] [EditorRequired] public required EventCallback OnDelete { get; set; }
    [Parameter] [EditorRequired] public required EventCallback OnRename { get; set; }
    [Parameter] [EditorRequired] public required EventCallback OnDownload { get; set; }
    [Parameter] [EditorRequired] public required EventCallback OnChangeVisibility { get; set; }
    [Parameter] [EditorRequired] public required CancellationToken CancellationToken { get; set; }

    private readonly Func<DashboardItem, string> GetDashboardItemName = item => item.IsFolder ? item.Folder.Name : item.File.Name;
    private string DashboardItemNameStyle => string.Format(
        "white-space:nowrap;overflow:hidden;text-overflow:ellipsis;font-weight:500;max-width:{0};",
        MobileViewManager.IsDesktop ? "100%" : "200px");
}
