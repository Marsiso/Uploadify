@using Uploadify.Client.Domain.Resources.Models
@using Uploadify.Client.Web.Components.Shared
@using Uploadify.Client.Web.Components.Shared.Dialogs
@using Uploadify.Client.Application.Files.Services
@inject FolderService FolderService
@inject IStringLocalizer Localizer

<Dialog IsVisible="@IsVisible"
        OnClose="@OnClose"
        Title="@Localizer[Translations.Components.Files.Dialogs.Create.Title]">
    <Content>
        <LoadingWrapper Errors="@SummaryResponse?.ErrorMessages"
                        IsLoading="@(IsLoading && SummaryResponse?.Resource == null)"
                        ShowTitle="false">
            <Children>
                <MudStack Spacing="5">
                    <MudTextField @bind-Value="@Name"
                                  Error="@(ResourceResponse is { ErrorMessages.Length: > 0 })"
                                  ErrorText="@ResourceResponse?.ErrorMessages.FirstOrDefault()"
                                  Label="@Localizer[Translations.Components.Files.Dialogs.Create.NameLabel]"
                                  DebounceInterval="100"
                                  OnDebounceIntervalElapsed="@(() => { ResourceResponse = null; IsDisabled = string.IsNullOrWhiteSpace(Name); })"/>
                    <MudButton Color="@Color.Tertiary"
                               Disabled="@(IsLoading || IsDisabled || string.IsNullOrWhiteSpace(Name))"
                               FullWidth
                               OnClick="@HandleSubmit"
                               Size="@Size.Large"
                               Style="border-radius: 1.5rem;"
                               Variant="@Variant.Filled">
                        @Localizer[Translations.Components.Files.Dialogs.Create.SubmitButton]
                    </MudButton>
                </MudStack>
            </Children>
        </LoadingWrapper>
    </Content>
</Dialog>


@code {
    [Parameter] [EditorRequired] public required bool IsVisible { get; set; }
    [Parameter] [EditorRequired] public required FolderOverview ParentFolder { get; set; }
    [Parameter] [EditorRequired] public required EventCallback OnSuccess { get; set; }
    [Parameter] [EditorRequired] public required EventCallback OnClose { get; set; }
    [Parameter] [EditorRequired] public required CancellationToken CancellationToken { get; set; }

    public string Name { get; set; } = string.Empty;
    public bool IsLoading { get; set; }
    public bool IsDisabled { get; set; }
    public ResourceResponse? ResourceResponse { get; set; }
    public ResourceResponse<FolderSummary>? SummaryResponse { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        SummaryResponse = await FolderService.GetSummary(ParentFolder.FolderId, CancellationToken);
        IsLoading = false;
    }

    protected async Task HandleSubmit()
    {
        IsLoading = true;
        ResourceResponse = await FolderService.Create(ParentFolder, Name, CancellationToken);
        if (ResourceResponse.IsSuccess)
        {
            await OnSuccess.InvokeAsync();
            await OnClose.InvokeAsync();
        }

        IsLoading = false;
    }

}
