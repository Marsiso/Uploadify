@using Uploadify.Client.Domain.Resources.Models
@using Uploadify.Client.Web.Components.Shared.Dialogs
@using Uploadify.Client.Application.Files.Services
@using System.Diagnostics.CodeAnalysis
@inject FileService FileService
@inject FolderService FolderService
@inject IStringLocalizer Localizer

<Dialog IsVisible="@IsVisible"
        Title="@Localizer[Translations.Components.Files.Dialogs.Delete.Title]"
        OnClose="@OnClose">
    <Content>
        <MudForm Errors="@(ResourceResponse?.ErrorMessages ?? Array.Empty<string>())">
            <MudStack Spacing="5">
                <MudText>@Localizer[Translations.Components.Files.Dialogs.Delete.Description]</MudText>
                <MudButton Color="@Color.Tertiary"
                           Disabled="@(IsLoading || IsDisabled)"
                           FullWidth="true"
                           OnClick="@HandleSubmit"
                           Size="@Size.Large"
                           Style="border-radius: 1.5rem;"
                           Variant="@Variant.Filled">
                    @Localizer[Translations.Components.Files.Dialogs.Delete.SubmitButton]
                </MudButton>
            </MudStack>
        </MudForm>
    </Content>
</Dialog>

@code {
    [Parameter] [EditorRequired] public required bool IsVisible { get; set; }
    [Parameter] [EditorRequired] public required EventCallback OnSuccess { get; set; }
    [Parameter] [EditorRequired] public required EventCallback OnClose { get; set; }
    [Parameter] [EditorRequired] public required CancellationToken CancellationToken { get; set; }

    [Parameter]
    [EditorRequired]
    [MemberNotNullWhen(true, nameof(Folder))]
    [MemberNotNullWhen(false, nameof(File))]
    public required bool IsFolder { get; set; }

    [Parameter] [EditorRequired] public FileOverview? File { get; set; }
    [Parameter] [EditorRequired] public FolderOverview? Folder { get; set; }

    public bool IsLoading { get; set; }
    public bool IsDisabled { get; set; }
    public ResourceResponse? ResourceResponse { get; set; }

    private async Task HandleSubmit()
    {
        IsLoading = true;

        if (IsFolder)
        {
            ResourceResponse = await FolderService.Delete(Folder, CancellationToken);
        }
        else
        {
            ResourceResponse = await FileService.Delete(File, CancellationToken);
        }

        if (ResourceResponse.IsSuccess)
        {
            await OnSuccess.InvokeAsync();
            await OnClose.InvokeAsync();
        }

        IsLoading = false;
    }

}
