@using Uploadify.Client.Application.Files.Services

@inject FileService FileService
@inject ISnackbar Snackbar
@inject IStringLocalizer Localizer

<MudFileUpload AppendMultipleFiles
               Disabled="@(IsDisabled || IsLoading)"
               Hidden="false"
               MaximumFileCount="@MaximumFileCount"
               InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20"
               InputStyle="opacity:0"
               @ondragend="@ClearDropzoneClass"
               @ondragenter="@SetDropzoneClass"
               @ondragleave="@ClearDropzoneClass"
               OnFilesChanged="@(args => HandleFilesChanged(args))"
               T="IReadOnlyList<IBrowserFile>">
    <ButtonTemplate>
        <MudPaper Class="@DropzoneClass" Outlined>
            <MudStack AlignItems="@AlignItems.Center" Justify="@Justify.Center" Row Style="height:50px">
                <MudIconButton Disabled Icon="@Icons.Material.Rounded.FileUpload"/>
            </MudStack>
        </MudPaper>
        <div class="relative d-flex justify-end z-30 mt-2">
            <MudButton for="@context.Id"
                       Style="border-radius:3rem;"
                       Class="px-5"
                       Color="@Color.Surface"
                       Size="@Size.Small"
                       Variant="@Variant.Filled"
                       HtmlTag="label"
                       StartIcon="@Icons.Material.Rounded.FileUpload"
                       Disabled="@(IsDisabled || IsLoading)">
                Nahrát
            </MudButton>
        </div>
    </ButtonTemplate>
</MudFileUpload>

@code {
    public const int MaximumFileCount = 50;
    public const long MaximumFileSize = 104857600L;
    public const string DefaultDropzoneClass = "relative rounded-lg border-2 border-dashed pa-4 mud-width-full mud-height-full z-10";

    [Parameter, EditorRequired] public required FolderOverview Destination { get; set; }
    [Parameter, EditorRequired] public required EventCallback<int?> OnSuccess { get; set; }
    [Parameter] public bool IsDisabled { get; set; }
    public bool IsLoading { get; set; }

    public string? DropzoneClass { get; set; } = DefaultDropzoneClass;

    public void SetDropzoneClass()
    {
        DropzoneClass = $"{DefaultDropzoneClass} mud-border-primary";
    }

    public void ClearDropzoneClass()
    {
        DropzoneClass = DefaultDropzoneClass;
    }

    public async Task HandleFilesChanged(InputFileChangeEventArgs args)
    {
        switch (args.FileCount)
        {
            case 0:
                ClearDropzoneClass();
                return;

            case > MaximumFileCount:
                Snackbar.Add(Localizer[Translations.Components.Files.Inputs.DragAndDropWrapper.TooManyFiles], Severity.Info);
                break;
        }

        IsLoading = true;

        var files = args.GetMultipleFiles();

        foreach (var file in files.Where(file => file.Size <= MaximumFileSize))
        {
            var resourceResponse = await FileService.Upload(Destination, file);
            if (resourceResponse.IsSuccess)
            {
                Snackbar.Add(string.Format(Localizer[Translations.Components.Files.Inputs.DragAndDropWrapper.UploadSuccess], file.Name), Severity.Success);
            }
            else
            {
                Snackbar.Add(string.Format(Localizer[Translations.Components.Files.Inputs.DragAndDropWrapper.UploadFailure], file.Name), Severity.Error);
            }
        }

        foreach (var file in files.Where(file => file.Size > MaximumFileSize))
        {
            Snackbar.Add(string.Format(Localizer[Translations.Components.Files.Inputs.DragAndDropWrapper.FileTooLarge], file.Name), Severity.Info);
        }

        ClearDropzoneClass();

        IsLoading = false;
        await OnSuccess.InvokeAsync(Destination.FolderId);
    }
}
