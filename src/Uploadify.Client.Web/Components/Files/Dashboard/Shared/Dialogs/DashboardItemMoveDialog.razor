@using Uploadify.Client.Domain.Resources.Models
@using Uploadify.Client.Web.Components.Shared
@using Uploadify.Client.Web.Components.Shared.Dialogs
@using Uploadify.Client.Application.Files.Services
@using Uploadify.Client.Application.Files.Models

@inject FileService FileService
@inject FolderService FolderService
@inject IStringLocalizer Localizer

<Dialog IsVisible="@IsVisible" OnClose="@(() => IsVisible = false)" Title="@Localizer[Translations.Components.Files.Dialogs.Move.Title]">
    <Content>
        <MudForm Errors="@(LocationChangedResourceResponse?.ErrorMessages ?? Array.Empty<string>())">
            <MudStack Spacing="5">
                <LoadingWrapper Errors="@LocationChangedResourceResponse?.ErrorMessages" IsLoading="@(IsLoading || FolderSummaryResponse == null)">
                    <Children>
                        <MudSelect AnchorOrigin="@Origin.BottomCenter"
                                   @bind-Value="@Destination"
                                   Label="@Localizer[Translations.Components.Files.Dialogs.Move.FolderSelectLabel]"
                                   Error="@(LocationChangedResourceResponse is { ErrorMessages.Length: > 0 })"
                                   ErrorText="@LocationChangedResourceResponse?.ErrorMessages.FirstOrDefault()"
                                   Variant="@Variant.Outlined">
                            @if (FolderSummaryResponse is { Resource.Parent: not null })
                            {
                                <MudSelectItem Value="@FolderSummaryResponse.Resource.Parent">
                                    <MudText>@FolderSummaryResponse.Resource.Parent.Name</MudText>
                                </MudSelectItem>
                            }

                            @if (FolderSummaryResponse is { Resource.Folders.Count: > 0 })
                            {
                                foreach (var item in FolderSummaryResponse.Resource.Folders)
                                {
                                    <MudSelectItem Value="@item">
                                        <MudText>@item.Name</MudText>
                                    </MudSelectItem>
                                }
                            }
                        </MudSelect>
                    </Children>
                </LoadingWrapper>
                <PrimaryButton IsDisabled="@(IsLoading || IsDisabled || Destination == null)"
                               IsLoading="@IsLoading"
                               FullWidth
                               Color="@Color.Success"
                               OnClick="@HandleSubmit"
                               Size="@Size.Large"
                               Text="@Localizer[Translations.Components.Files.Dialogs.Move.SubmitButton]"/>
            </MudStack>
        </MudForm>
    </Content>
</Dialog>

@code {
    private FolderOverview? _destination;

    [Parameter] [EditorRequired] public required DashboardItem Item { get; set; }
    [Parameter] [EditorRequired] public required bool IsVisible { get; set; }
    [Parameter] [EditorRequired] public required EventCallback OnSuccess { get; set; }
    [Parameter] [EditorRequired] public required CancellationToken CancellationToken { get; set; }

    public bool IsLoading { get; set; }
    public bool IsDisabled { get; set; }

    public ResourceResponse<FolderSummary>? FolderSummaryResponse { get; set; }

    public FolderOverview? Destination
    {
        get => _destination;
        set
        {
            _destination = value;
            LocationChangedResourceResponse = null;
        }
    }

    public ResourceResponse? LocationChangedResourceResponse { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;

        if (Item.IsFolder)
        {
            FolderSummaryResponse = await FolderService.GetSummary(Item.Folder.ParentId, CancellationToken);
            IsLoading = false;
            return;
        }

        FolderSummaryResponse = await FolderService.GetSummary(Item.File.FolderId, CancellationToken);
        IsLoading = false;
    }

    private async Task HandleSubmit()
    {
        IsLoading = true;

        if (Item.IsFolder)
        {
            LocationChangedResourceResponse = await FolderService.Move(Item.Folder.FolderId, Destination?.FolderId, CancellationToken);
        }
        else
        {
            LocationChangedResourceResponse = await FileService.Move(Item.File.FileId, Destination?.FolderId, CancellationToken);
        }

        if (LocationChangedResourceResponse.IsSuccess)
        {
            await OnSuccess.InvokeAsync();
            IsVisible = false;
        }

        IsLoading = false;
    }
}
