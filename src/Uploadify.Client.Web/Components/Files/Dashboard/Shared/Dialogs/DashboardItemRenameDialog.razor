@using Uploadify.Client.Domain.Resources.Models
@using Uploadify.Client.Web.Components.Shared.Dialogs
@using Uploadify.Client.Web.Components.Shared
@using Uploadify.Client.Application.Files.Services
@using Uploadify.Client.Application.Files.Helpers
@using Uploadify.Client.Application.Files.Models

@inject FileService FileService
@inject FolderService FolderService
@inject IStringLocalizer Localizer

<Dialog IsVisible="@IsVisible" Title="@Localizer[Translations.Components.Files.Dialogs.Rename.Title]" OnClose="@(() => IsVisible = false)">
    <Content>
        <MudForm Errors="@(ResourceResponse?.ErrorMessages ?? Array.Empty<string>())">
            <MudStack Spacing="5">
                <MudTextField @bind-Value="@Name"
                              DebounceInterval="100"
                              Error="@(ResourceResponse is { ErrorMessages.Length: > 0 })"
                              ErrorText="@ResourceResponse?.ErrorMessages.FirstOrDefault()"
                              Variant="@Variant.Outlined"
                              Label="@Localizer[Translations.Components.Files.Dialogs.Rename.NameLabel]"
                              OnDebounceIntervalElapsed="@HandleDebounceIntervalElapsed"/>

                <PrimaryButton Text="@Localizer[Translations.Components.Files.Dialogs.Rename.SubmitButton]"
                               Size="@Size.Large"
                               OnClick="@HandleSubmit"
                               FullWidth
                               Color="@Color.Success"
                               IsDisabled="@(IsLoading || IsDisabled || DefaultName.Equals(Name, StringComparison.Ordinal))"
                               IsLoading="@IsLoading"/>
            </MudStack>
        </MudForm>
    </Content>
</Dialog>

@code {
    [Parameter] [EditorRequired] public required DashboardItem Item { get; set; }
    [Parameter] [EditorRequired] public required bool IsVisible { get; set; }
    [Parameter] [EditorRequired] public required EventCallback<int?> OnSuccess { get; set; }
    [Parameter] [EditorRequired] public required CancellationToken CancellationToken { get; set; }

    public bool IsLoading { get; set; }
    public bool IsDisabled { get; set; }

    public string Name { get; set; } = string.Empty;
    public string DefaultName { get; set; } = string.Empty;
    public ResourceResponse? ResourceResponse { get; set; }

    protected override void OnParametersSet()
    {
        if (Item.IsFolder)
        {
            Name = DefaultName = Item.Folder.Name;
            return;
        }

        Name = DefaultName = Path.GetFileNameWithoutExtension(Item.File.Name);
    }

    private async Task HandleSubmit()
    {
        IsLoading = true;

        if (Item.IsFolder)
        {
            ResourceResponse = await FolderService.Rename(Item.Folder, Name, CancellationToken);
        }
        else
        {
            ResourceResponse = await FileService.Rename(Item.File, FileHelpers.Rename(Item.File.Name, Name), CancellationToken);
        }

        if (ResourceResponse.IsSuccess)
        {
            await OnSuccess.InvokeAsync();
            IsVisible = false;
        }

        IsLoading = false;
    }

    protected void HandleDebounceIntervalElapsed()
    {
        ResourceResponse = null;
        IsDisabled = DefaultName.Equals(Name, StringComparison.Ordinal);
    }
}
