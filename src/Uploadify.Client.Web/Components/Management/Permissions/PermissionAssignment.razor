@using Uploadify.Client.Application.Application.Services
@using Uploadify.Client.Web.Components.Management.Roles
@using Uploadify.Client.Web.Components.Shared

@inject NavigationManager Navigation
@inject PermissionService PermissionService
@inject IStringLocalizer<TranslationDictionary> Localizer

<MudDialog @bind-IsVisible="@IsVisible" Class="pa-5" ClassActions="px-5">
    <TitleContent>
        <MudText Class="mb-5" Typo="@Typo.h4">
            @Localizer[Translations.Components.PermissionAssignment.Title]
        </MudText>
        <MudText>
            @Localizer[Translations.Components.PermissionAssignment.Description]
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudStack>
            <RoleSelector CancellationToken="@CancellationToken" OnSelectedValueChanged="@OnSelectedRoleChanged"/>
            <PermissionSelector OnSelectedValueChanged="@OnSelectedPermissionChanged" Role="@SelectedRole"/>
        </MudStack>
    </DialogContent>
    <DialogActions>
        <PrimaryButton Color="@Color.Success"
                       IsDisabled="@(string.IsNullOrWhiteSpace(SelectedRole?.Name) || IsLoading || SelectedPermission == Permission.None)"
                       FullWidth
                       OnClick="@OnSubmit"
                       Size="@Size.Large" Text="@Localizer[Translations.Components.PermissionAssignment.SubmitButton]"/>
    </DialogActions>
</MudDialog>

@code {
    public bool IsLoading { get; set; }
    public Permission SelectedPermission { get; set; }
    public RoleOverview? SelectedRole { get; set; }

    [Parameter] public required bool IsVisible { get; set; }
    [Parameter] public required EventCallback OnSuccess{ get; set; }
    [Parameter] public required CancellationToken CancellationToken { get; set; }

    private async Task OnSubmit()
    {
        if (string.IsNullOrWhiteSpace(SelectedRole?.Name))
        {
            return;
        }

        IsLoading = true;

        var resourceResponse = await PermissionService.AssignPermission(SelectedPermission, SelectedRole, CancellationToken);
        if (resourceResponse.IsSuccess)
        {
            await OnSuccess.InvokeAsync();
            IsVisible = false;
        }

        IsLoading = false;
    }

    private void OnSelectedRoleChanged(RoleOverview? role)
    {
        SelectedRole = role;
    }

    private void OnSelectedPermissionChanged(Permission permission)
    {
        SelectedPermission = permission;
    }
}
