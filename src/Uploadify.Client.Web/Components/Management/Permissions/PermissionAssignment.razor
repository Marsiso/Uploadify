@using Uploadify.Client.Application.Application.Services
@using Uploadify.Client.Web.Components.Management.Roles
@inject NavigationManager Navigation
@inject PermissionService PermissionService
@inject IStringLocalizer<TranslationDictionary> Localizer

<MudDialog @bind-IsVisible="@IsVisible"
           Class="pa-4"
           ClassActions="px-6">
    <TitleContent>
        <MudText Class="mb-4"
                 Typo="@Typo.h4">
            @Localizer[Translations.Components.PermissionAssignment.Title]
        </MudText>
        <MudText Typo="@Typo.body1">
            @Localizer[Translations.Components.PermissionAssignment.Description]
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudStack>
            <RoleSelector CancellationToken="@CancellationToken"
                          OnSelectedValueChanged="@OnSelectedRoleChanged"/>
            <PermissionSelector OnSelectedValueChanged="@OnSelectedPermissionChanged"
                                Role="@_selectedRole"/>
        </MudStack>
    </DialogContent>
    <DialogActions>
        <MudButton Color="@Color.Tertiary"
                   Disabled="@(string.IsNullOrWhiteSpace(_selectedRole?.Name) || _isPermissionAssignmentInProgress || _selectedPermission == Permission.None)"
                   FullWidth
                   OnClick="@OnSubmit"
                   Size="@Size.Large"
                   Style="border-radius: 1.5rem;"
                   Variant="@Variant.Filled">
            @Localizer[Translations.Components.PermissionAssignment.SubmitButton]
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    private bool _isPermissionAssignmentInProgress;
    private Permission _selectedPermission;
    private RoleOverview? _selectedRole;

    [Parameter] public required bool IsVisible { get; set; }
    [Parameter] public required EventCallback OnSuccess{ get; set; }
    [Parameter] public required CancellationToken CancellationToken { get; set; }

    private async Task OnSubmit()
    {
        if (string.IsNullOrWhiteSpace(_selectedRole?.Name))
        {
            return;
        }

        _isPermissionAssignmentInProgress = true;

        var resourceResponse = await PermissionService.AssignPermission(_selectedPermission, _selectedRole, CancellationToken);
        if (resourceResponse.IsSuccess)
        {
            await OnSuccess.InvokeAsync();
            IsVisible = false;
        }

        _isPermissionAssignmentInProgress = false;
    }

    private void OnSelectedRoleChanged(RoleOverview? role)
    {
        _selectedRole = role;
    }

    private void OnSelectedPermissionChanged(Permission permission)
    {
        _selectedPermission = permission;
    }

}
