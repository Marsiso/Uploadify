@using Mapster
@using Uploadify.Client.Application.Application.Services
@using Uploadify.Client.Core.Auth.Constants

@inject RoleService RoleService
@inject PermissionService PermissionService
@inject IStringLocalizer Localizer

<div>
    <div class="d-flex justify-space-between align-center">
        <MudText Typo="Typo.h3">@Localizer[Translations.Components.PermissionDashboard.Title]</MudText>
        <PermissionView Permission="Permission.EditPermissions">
            <Authorized>
                <MudIconButton Icon="@Icons.Material.Rounded.GroupAdd" OnClick="@(() => OnAssignPermission())" Color="@Color.Primary"/>
            </Authorized>
            <NotAuthorized>
                <MudIconButton Disabled Icon="@Icons.Material.Rounded.GroupAdd" Color="@Color.Primary"/>
            </NotAuthorized>
        </PermissionView>
    </div>

    <MudDataGrid Culture="@CultureInfo.CurrentCulture"
                 Filterable="false"
                 Groupable
                 Items="@ProjectByPermission(Summary?.Roles ?? Enumerable.Empty<RoleOverview>())"
                 Loading="@(IsLoading || Summary is not { Roles: not null })"
                 LoadingProgressColor="@Color.Primary"
                 SortMode="@SortMode.None"
                 T="Element">
        <Columns>
            <PropertyColumn Groupable="false" Property="element => element.Role.Name" Title="@Localizer[Translations.Components.PermissionDashboard.RoleNameLabel]"/>
            <TemplateColumn CellClass="d-flex justify-end" Groupable="false">
                <CellTemplate>
                    <MudToolBar Class="px-0" Dense>
                        @{
                            var element = context.Item;
                        }

                        <PermissionView Context="AuthenticationState" Permission="Permission.EditPermissions">
                            <Authorized>
                                <MudIconButton Icon="@Icons.Material.Rounded.GroupRemove" OnClick="@(() => OnRevokePermission(context.Item))" Color="@Color.Primary"/>
                            </Authorized>
                            <NotAuthorized>
                                <MudIconButton Disabled Icon="@Icons.Material.Rounded.GroupRemove"/>
                            </NotAuthorized>
                        </PermissionView>
                    </MudToolBar>
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Groupable="true"
                            GroupBy="@(element => GroupByPermission(element.Role))"
                            Grouping
                            Hidden
                            Property="@(element => element.Permission)">
                <GroupTemplate>
                    <MudText Class="text-center ps-2" Inline>
                        @if (context.Grouping.Key is Permission permission)
                        {
                            @Localizer[PermissionTranslationKeys.Values[permission]]
                        }

                        <MudChip Color="@Color.Primary" Size="@Size.Small" Variant="@Variant.Text">
                            @context.Grouping.Count()
                        </MudChip>
                    </MudText>
                </GroupTemplate>
            </PropertyColumn>
        </Columns>
    </MudDataGrid>
</div>

<PermissionAssignment CancellationToken="@CancellationToken" OnSuccess="FetchRoleSummary" @ref="@PermissionAssignment"/>

@code {
    [Parameter, EditorRequired] public CancellationToken CancellationToken { get; set; }

    public readonly IEnumerable<Permission> Permissions = PermissionHelpers.GetValues();

    public bool IsLoading { get; set; } = true;
    public RolesSummary? Summary { get; set; }

    protected PermissionAssignment? PermissionAssignment { get; set; }

    protected override Task OnInitializedAsync() => FetchRoleSummary();

    protected async Task FetchRoleSummary()
    {
        IsLoading = true;

        var resourceResponse = await RoleService.GetSummary();

        if (!resourceResponse.IsSuccess)
        {
            return;
        }

        Summary = resourceResponse.Resource;
        IsLoading = false;
    }

    protected IEnumerable<Element> ProjectByPermission(IEnumerable<RoleOverview> roles)
    {
        var elements = new List<Element>();
        foreach (var projectedRoles in roles.Select(ProjectByPermission))
        {
            elements.AddRange(projectedRoles.Select(role => new Element(role.Permission ?? Permission.None, role)));
        }

        return elements.DistinctBy(element => new { element.Permission, element.Role.Name });
    }

    protected IEnumerable<RoleOverview> ProjectByPermission(RoleOverview role)
    {
        var permissions = Permissions.Where(permission => role.Permission.HasValue && role.Permission.Value.HasFlag(permission));
        var roles = permissions.Select(permission =>
        {
            var projectedRole = role.Adapt<RoleOverview>();

            projectedRole.Permission = permission;

            return projectedRole;
        });

        return roles;
    }

    protected object GroupByPermission(RoleOverview role) => role.Permission ?? Permission.None;

    protected record Element(Permission Permission, RoleOverview Role);

    protected void OnAssignPermission()
    {
        if (PermissionAssignment == null)
        {
            return;
        }

        PermissionAssignment.IsVisible = true;
    }

    protected async Task OnRevokePermission(Element element)
    {
        var resourceResponse = await PermissionService.RevokePermission(element.Permission, element.Role, CancellationToken);
        if (!resourceResponse.IsSuccess)
        {
            return;
        }

        var role = Summary?.Roles.SingleOrDefault(role => role.Name == element.Role.Name);
        if (role != null)
        {
            role.Permission &= ~element.Permission;
        }
    }
}
